""""""""""""""""""""""""""""
"1、基本及字体
"""""""""""""""""""""""""""
" 定义快捷键的前缀，即<Leader>
let mapleader=";"
noremap <c-k> <c-w>k
noremap <c-j> <c-w>j
noremap <c-h> <c-w>h
noremap <c-l> <c-w>l
"""""""""""""""""""""""""""
"2、插件管理
"""""""""""""""""""""""""""
"插件[ gmarik/vundle]
"
"推荐等级：★★★★★
"
"vim 的各插件打包文档中通常也包含doc、plugin子目录，用户将插件打包文档中的对应子目录拷贝至.vim/目录中即可完成安装，但插件一多将混乱不堪，会出现名字冲突，卸载麻烦（有时分不清那个文件对应哪个插件，自己也不清楚到底安装了哪些插件）等问题。
"
"vundle可以帮我们解决这些问题。
"
"通过使用vundle来安装新的插件也及其方便:
"
"    可以去GIT，也可以去Vim Scripts查找并选好你想要的插件。
"    在VIM的配置文件中写一句 Bundle plugin_name；
"    执行一下Vundle的初始化命令，插件就装好了；
"        升级和卸载也是同样的简单；
"
"Bundle 支持的格式有三种：
"
"第一种是一个普通的字符串，就是 vim 插件页面里左上角的插件名字，如果插件名有空格，使用 - 替换。
"
"第二种是github帐号/项目名。
"
"第三种就是git repository
"
"具体可查看vbundle的帮助文档。
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'scrooloose/nerdtree'
Plugin 'majutsushi/tagbar'
Plugin 'vim-scripts/taglist.vim'
"Plugin 'fholgado/minibufexpl.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'Lokaltog/vim-powerline'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'scrooloose/nerdcommenter'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'Raimondi/delimitMate'
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/syntastic'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'honza/vim-snippets'
Plugin 'oplatek/Conque-Shell'


" let Vundle mana

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"""""""""""""""""""""""""""
"3、主题风格
"""""""""""""""""""""""""""
"一套好的配色方案绝对会影响你的编码效率,vim 内置了 10 多种配色方案供你选择
"
"GUI 下,可以通过菜单(Edit -> Color Scheme)试用不同方案,字符模式下,需要你手工调整配置信息,再重启 vim 查看效果(csExplorer 插件,可在字符模式下不用重启即可查看效果)。 还不满意,可以在VIM Color Scheme Test - C这里选择自己喜欢的配色方案
"
"目前用得最多的是下面三种配色方案：
"
"    solarized 推荐等级：★★★★★
"    molokai 推荐等级：★★★★★
"    phd 推荐等级：★★★★☆
"
"""""""""""""""""""""""""""
"5、目录树导航
"""""""""""""""""""""""""""
"
"插件:vim-scripts/The-NERD-tree
"
"推荐等级：★★★★★
"
"nerd-tree插件可以查看文件列表，要打开哪个文件,光标选中后回车即可在新 buffer 中打开。
"
"配置如下：
"
""目录文件导航
"Bundle 'scrooloose/nerdtree'
" \nt                 打开nerdree窗口，在左侧栏显示
nmap <leader>nt :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
let g:netrw_home='~/bak'
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
let NERDTreeWinSize=25
let NERDTreeMinimalUI=1

hi NERDTreeDirSlash ctermfg=186
hi NERDTreeUp   ctermfg=186  
hi NERDTreeToggleOff ctermfg=186 
hi NERDTreeDir    ctermfg=186 
hi NERDTreeClosable ctermfg=141 
hi NERDTreeOpenable ctermfg=141 
hi NERDTreeRO     ctermfg=186 
hi NERDTreeExecFile ctermfg=141
"""""""""""""""""""""""""""
"6、标签导航
"""""""""""""""""""""""""""
"
"majutsushi/tagbar
"
"推荐等级：★★★★★
"
"    tagbar按作用域归类不同的标签。按名字空间 n_foo、类 Foo 进行归类,在内部有声明、有定义;
"    显示标签类型。名字空间、类、函数等等;
"    显示完整函数原型;
"    图形化显示共有成员(+)、私有成员(-)、保护成员(#);
"
"配置如下：
"
""标签导航，纬度和taglist不同
"Bundle 'majutsushi/tagbar'
nmap <leader>tb :TagbarToggle<CR>  " \tb 打开tagbar窗口
let g:tagbar_autofocus = 1
let g:tagbar_width=25 
let g:tagbar_compact=1

hi TagbarKind     ctermfg=148
hi TagbarScope    ctermfg=197
hi TagbarFoldIcon ctermfg=186
hi TagbarNestedKind ctermfg=148
hi TagbarType     ctermfg=81
hi TagbarSignature ctermfg=186
hi TagbarPseudoID ctermfg=148
hi TagbarHighlight ctermfg=208
hi TagbarAccessPublic 		ctermfg=186 guifg=Green
hi TagbarAccessProtected 	ctermfg=141 guifg=Blue
hi TagbarAccessPrivate 	ctermfg=197 guifg=Red

"""""""""""""""""""""""""""
"7、taglist
"""""""""""""""""""""""""""
"
"vim-scripts/taglist.vim
"
"推荐等级：★★★★☆
"
"在vimrc中配置如下：
"
"Bundle 'vim-scripts/taglist.vim'
" \tl                 打开Taglist/TxtBrowser窗口，在右侧栏显示
nmap <leader>tl :Tlist<CR><c-l>
" :Tlist              调用TagList
let Tlist_Show_One_File        = 1             " 只显示当前文件的tags
let Tlist_Exit_OnlyWindow      = 1             " 如果Taglist窗口是最后一个窗口则退出Vim
let Tlist_Use_Right_Window     = 1             " 在右侧窗口中显示
let Tlist_File_Fold_Auto_Close = 1             " 自动折叠
"let Tlist_Sort_Type = "name"                   " items in tags sorted by name

"""""""""""""""""""""""""""
"8、多文档编辑
"""""""""""""""""""""""""""
"
"插件fholgado/minibufexpl.vim
"
"推荐等级：★★★★★
"
"vim 的多文档编辑涉及三个概念：buffer、window、tab，这三个事物与我们常规理 解意义大相径庭。vim 把加载进内存的文件叫做 buffer，buffer 不一定可见；若要 buffer 要可见，则必须通过 window 作为载体呈现；同个看面上的多个 window 组合成 一个 tab。vim 中每打开一个文件，vim 就对应创建一个 buffer，多个文件就有多个 buffer，但默认你只看得到最后 buffer 对应的 window
"
"vimrc中配置如下：
"
"Bundle 'fholgado/minibufexpl.vim'
" 多文件切换，也可使用鼠标双击相应文件名进行切换
"let g:miniBufExplMapWindowNavVim    = 1
"let g:miniBufExplMapWindowNavArrows = 1
"let g:miniBufExplMapCTabSwitchBufs  = 1
"let g:miniBufExplModSelTarget       = 1
"解决FileExplorer窗口变小问题
"let g:miniBufExplForceSyntaxEnable = 1
"let g:miniBufExplorerMoreThanOne=2
"let g:miniBufExplCycleArround=1
" buffer 切换快捷键，默认方向键左右可以切换buffer
map <C-Tab> :MBEbn<cr>
map <C-S-Tab> :MBEbp<cr>
map <Leader>mb :MBEToggle<cr>
hi MBEVisibleActiveNormal cterm=underline ctermfg=81
"let g:miniBufExplorerMoreThanOne=0
let g:miniBufExplVSplit=1
let g:miniBufExplBRSplit=32

"""""""""""""""""""""""""""
"9、文件搜索
"""""""""""""""""""""""""""
"
"插件:kien/ctrlp.vim
"
"推荐等级：★★★★☆
"
"CtrlP会沿着vim打开的目录一直向上查找类似.git/.svn等这样的项目管理的目录，如果找到则将这个作为项目的根目录 vimrc中配置如下：
"
""for file search ctrlp, 文件搜索
"Bundle 'kien/ctrlp.vim'
" 打开ctrlp搜索
let g:ctrlp_map = '<leader>ff'
let g:ctrlp_cmd = 'CtrlP'
" 相当于mru功能，show recently opened files
map <leader>fp :CtrlPMRU<CR>
"set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux"
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
"\ 'link': 'SOME_BAD_SYMBOLIC_LINKS',
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

"""""""""""""""""""""""""""
"10、美化状态栏
"""""""""""""""""""""""""""
"
"插件：Lokaltog/vim-powerline
"
"推荐等级：★★★★☆
"
"状态栏增强展示,通过本插件,增强后的状态栏，不仅界面漂亮多了，而且多 了好些辅助信息（所在函数名、文件编码格式、文件类型）。 vimrc中配置如下：
"
"Bundle 'Lokaltog/vim-powerline'
"if want to use fancy,need to add font patch -> git clone git://gist.github.com/1630581.git ~/.fonts/ttf-dejavu-powerline
set laststatus=2
let g:Powerline_symbols = 'fancy'
"let g:Powerline_symbols = 'unicode'

"""""""""""""""""""""""""""
"14、快速移动
"""""""""""""""""""""""""""
"
"插件:Lokaltog/vim-easymotion
"
"推荐等级：★★★★★
"
"效率提升杀手锏，跳转到光标后任意位置
"
"vimrc中配置如下：
"
""更高效的移动 // + w/f/l
"Bundle 'Lokaltog/vim-easymotion'
let g:EasyMotion_leader_key='f'
"hi EasyMotionTargetDefault  cterm=bold ctermfg=197 gui=bold guifg=#ff0000
"hi EasyMotionTarget2FirstDefault  cterm=bold ctermfg=186 gui=bold guifg=#ffb400
"hi EasyMotionTarget2SecondDefault  cterm=bold ctermfg=186 gui=bold guifg=#b98300
"""""""""""""""""""""""""""
"16、自动补全
"""""""""""""""""""""""""""
"
"插件：Valloric/YouCompleteMe
"
"推荐等级：★★★★★
"
"强烈推荐 Ubuntu13.04配置YCM可参考这里
let g:ycm_show_diagnostics_ui = 0

" 自动补全配置
"set completeopt=longest,menu	"让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)
"autocmd InsertLeave * if pumvisible() == 0|pclose|endif	"离开插入模式后自动关闭预览窗口

"""""""""""""""""""""""""""
"17、宏定义补全
"""""""""""""""""""""""""""
"
"插件：SirVer/ultisnips
"
"推荐等级：★★★★★
"
"配合YCM使用，双剑合璧,方便快捷，强烈推荐
"
"开发时,我经常要输入相同的代码片断,比如 if-else、switch 语句,ultisnips可以快速插入我们自定义的代码片段,实现高效补全。 UltiSnips 预定义了几十种语言常用的代码模板,位于~/.vim/bundle/UltiSnips/UltiSnips/,UltiSnips 有一套自己的代码模板语法规则。 vimrc中配置如下：
"
""快速插入代码片段
"Bundle 'SirVer/ultisnips'
"let g:UltiSnipsSnippetDirectories=["mysnippets"] 
""定义存放代码片段的文件夹 .vim/snippets下，使用自定义和默认的，将会的到全局，有冲突的会提示
let g:UltiSnipsSnippetDirectories=["bundle/vim-snippets/UltiSnips"]

let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
"
"""""""""""""""""""""""""""
"18、快速加减注释
"""""""""""""""""""""""""""
"
"插件：scrooloose/nerdcommenter
"
"推荐等级：★★★★★
"
"快速批量注释,方便好用
"
"常用操作：
"
"    <leader>cc，注释当前选中文本，如果选中的是整行则在每行首添加 //，如果选中
"
"一行的部分内容则在选中部分前后添加分别 /、/；
"
"    <leader>cu，取消选中文本块的注释。
"
"更多内容见帮助文档。
"
"Bundle 'scrooloose/nerdcommenter'
let NERDSpaceDelims = 1

"""""""""""""""""""""""""""
"19、快速加环绕符
"""""""""""""""""""""""""""
"
"tpope/vim-surround 详情见帮助文档 配合使用增强版命令重复 [https://github.com/tpope/vim-repeat| pope/vim-repeat ] vimrc中配置如下：
"
"Bundle 'tpope/vim-surround'
""for repeat -> enhance surround.vim, . to repeat command
"Bundle 'tpope/vim-repeat'

"""""""""""""""""""""""""""
"20、自动括号补全
"""""""""""""""""""""""""""
"
"插件：Raimondi/delimitMate
"
"推荐等级：★★★★☆
"
"vimrc中配置如下：
"
""自动补全单引号，双引号等
"Bundle 'Raimondi/delimitMate'
" for python docstring ",优化输入
"au FileType python let b:delimitMate_nesting_quotes = ['"']

"""""""""""""""""""""""""""
"21、代码对齐
"""""""""""""""""""""""""""
"
"插件：godlygeek/tabular
"
"推荐等级：★★★★★
"
"vimrc中配置如下：
"
""for code alignment
"Bundle 'godlygeek/tabular'
" \bb                 按=号对齐代码 [Tabular插件]
nmap <leader>bb :Tab /=<CR>
" \bn                 自定义对齐    [Tabular插件]
nmap <leader>bn :Tab /

"""""""""""""""""""""""""""
"22、静态代码分析
"""""""""""""""""""""""""""
"
"插件：scrooloose/syntastic
"
"推荐等级：★★★★☆
"
"syntastic是一款支持多语言的实时语法检查插件。在 syntastic 的作用下，编码中、编译前，所有语法错误都将被抓出来并 呈现给你。
"
"vimrc中配置如下：
"
"" 使用pyflakes,速度比pylint快
"Bundle 'scrooloose/syntastic'
let g:syntastic_error_symbol = '✗'	"set error or warning signs
let g:syntastic_warning_symbol = '⚠'
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting=0
"let g:syntastic_python_checker="flake8,pyflakes,pep8,pylint"
let g:syntastic_python_checkers=['pyflakes']
highlight SyntasticErrorSign guifg=white guibg=black

let g:syntastic_cpp_include_dirs = ['/usr/include/']
let g:syntastic_cpp_remove_include_errors = 1
let g:syntastic_cpp_check_header = 1
let g:syntastic_cpp_compiler = 'clang-3.5'
let g:syntastic_cpp_compiler_options = '-std=c++11 -stdlib=libstdc++'
let g:syntastic_enable_balloons = 1	"whether to show balloons
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
nmap <leader>lo :lopen<CR>	"open locationlist
nmap <leader>lc :lclose<CR>
let g:syntastic_loc_list_height = 8 
""""""""""""""""""""""""""""
"25、多光标批量操作
""""""""""""""""""""""""""""
"
"插件：terryma/vim-multiple-cursors
"
"推荐等级：★★★☆☆
"
"vimrc中配置如下：
"
""for mutil cursor
"Bundle 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

""""""""""""""""""""""""""""
"26、vim中运行终端
""""""""""""""""""""""""""""
" 水平分割出一个bash
"nnoremap    <C-\>b       :ConqueTermSplit bash<CR>
nnoremap    <leader>sh      :ConqueTermSplit zsh<CR><CR> <Esc>:resize -8<CR>
" 垂直分割出一个bash
nnoremap    <C-\>vb      :ConqueTermVSplit bash<CR>
"let g:ConqueTerm_FastMode = 0
""""""""""""""""""""""""""""""""""""""
" 语法着色与高亮设置
""""""""""""""""""""""""""""""""""""""

"开启语法高亮
syntax enable
syntax on

set background=dark 
"colorscheme monokai
"colorscheme molokai
"colorscheme hehe1
"let g:molokai_original = 1
"let g:rehash256 = 1
"colorscheme solarized
"colorscheme phd

"配色
"colo ruki
"colors ruki
"由于目前没有找到ruki插件，暂时取消该功能，找到该插件后，再启用该功能

"设置高亮搜索
:set hlsearch

"""""""""""""""""""""""""""""""""""""" " 文件设置
""""""""""""""""""""""""""""""""""""""

set encoding=utf-8
set fileencoding=chinese
set fileencodings=ucs-bom,utf-8,chinese
set ambiwidth=double


"检测文件的类型
filetype on

"默认无备份
:set nobackup
:set nowritebackup

""""""""""""""""""""""""""""""""""""""
" 鼠标设置
""""""""""""""""""""""""""""""""""""""

"鼠标支持
if has('mouse')
:set mouse=a
endif

"使鼠标用起来象微软 Windows,似乎正好解决 连续多行缩进问题、退格问题
:behave mswin

""""""""""""""""""""""""""""""""""""""
" 编辑器设置
""""""""""""""""""""""""""""""""""""""

"显示行号
set number

"Tab 宽度
:set ts=4

"自动缩进
:set sw=4

"显示当前行
:set cursorline

"C/C++ 风格的自动缩进
:set cin
"设定 C/C++ 风格自动缩进的选项
:set cino=:0g0t0(sus

"打开普通文件类型的自动缩进
:set ai

"在编辑过程中，在右下角显示光标位置的状态行
:set ruler

"显示匹配括号
:set showmatch

"在insert模式下能用删除键进行删除
:set backspace=indent,eol,start

"代码折叠, 命令 za
:set foldmethod=syntax
:set foldlevel=100  "启动vim时不要自动折叠代码

"设置字体
:set guifont=courier\ 12

"当右键单击窗口的时候， 弹出快捷菜单
:set mousemodel=popup

"自动换行
if (has("gui_running")) "图形界面下的设置

"指定不折行。如果一行太长，超过屏幕宽度，则向右边延伸到屏幕外面
:set nowrap
"添加水平滚动条。如果你指定了不折行，那为窗口添加一个水平滚动条就非常有必要了
:set guioptions+=b

else "字符界面下的设置
   set wrap
endif

""""""""""""""""""""""""""""""""""""""
" 快捷键设置
""""""""""""""""""""""""""""""""""""""
"<F1> 菜单栏与工具栏隐藏与显示动态切换
set guioptions-=m
set guioptions-=T
map <silent> <F1> :if &guioptions =~# 'T' <Bar>
        \set guioptions-=T <Bar>
        \set guioptions-=m <bar>
    \else <Bar>
        \set guioptions+=T <Bar>
        \set guioptions+=m <Bar>
    \endif<CR>

"<F2>code_complete.vim插件：函数自动完成
if !exists("g:completekey")
    let g:completekey = "<F2>"   "hotkey
endif

"<F3><F4>大小写转换
map <F3> gu
map <F4> gU

"当前目录生成tags语法文件，用于自动完成，函数提示：code_complete.vim OmniCppComplete.vim ...
"map <F5> :!ctags -R --c-kinds=+p --fields=+S . <CR>
map <F5> :!ctags -R --c-kinds=+p --c++-kinds=+p --fields=+iaS --extra=+q . <CR>

"函数和变量列表
map <F6> :TlistToggle<CR>

"文件浏览器
map <F7> :WMToggle<CR>
let g:winManagerWindowLayout = "FileExplorer"

"文件树状列表
map <F8> :NERDTree<CR>

"映射复制、粘贴、剪贴ctrl+c ctrl+v ctrl+x
":map <C-V> "+pa<Esc>
":map! <C-V> <Esc>"+pa
":map <C-C> "+y
":map <C-X> "+x


" 映射全选 ctrl+a
:map <C-A> ggVG
:map! <C-A> <Esc>ggVG

" 多行缩进
:map <Tab> >
:map <S-Tab> <

""""""""""""""""""""""""""""""""""""""
" 插件设置
""""""""""""""""""""""""""""""""""""""

"开启OmniCppComplete.vim
set nocp
filetype plugin on

"2Html插件，启用XHtml css
:let html_number_lines=1
:let html_use_css=1
:let use_xhtml=1

"fencview.vim 插件设置
let g:fencview_autodetect = 1  "打开文件时自动识别编码
let g:fencview_checklines = 10 "检查前后10行来判断编码

"autocomplpop.vim & supertab.vim 插件设置
let g:AutoComplPop_IgnoreCaseOption=1
set ignorecase

""""""""""""""""""""""""""""""""""""""
" 其他设置
""""""""""""""""""""""""""""""""""""""

"去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
:set nocompatible




" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" 定义快捷键到行首和行尾
" nmap lb 0
" nmap le $
" 设置快捷键全选中文本块
nmap <Leader>a ggVG
" 设置快捷键将选中文本块复制至系统剪贴板
 vnoremap <Leader>y "+y
" 设置快捷键将系统剪贴板内容粘贴至 vim
nmap <Leader>p "+p
" 定义快捷键关闭当前分割窗口
nmap <Leader>q :q<CR>
" 定义快捷键保存当前窗口内容
nmap <Leader>w :w<CR>
" 定义快捷键保存所有窗口内容并退出 vim
nmap <Leader>WQ :wa<CR>:q<CR>
" 不做任何保存，直接退出 vim
nmap <Leader>Q :qa!<CR>
" 依次遍历子窗口
nnoremap nw <C-W><C-W>
" 跳转至右方的窗口
nnoremap <Leader>lw <C-W>l
" 跳转至方的窗口
nnoremap <Leader>hw <C-W>h
" 跳转至上方的子窗口
nnoremap <Leader>kw <C-W>k
" 跳转至下方的子窗口
nnoremap <Leader>jw <C-W>j
" 定义快捷键在结对符之间跳转，助记pair
nmap <Leader>pa %

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"配色   " 0黑 1白 2深绿  3褐色 4深蓝 5深紫  6深绿 7浅灰 8灰 9红 10绿 11黄 12蓝 13淡紫 14 碧蓝 15加粗白
"186淡黄色    197红色  242灰色 141紫色 81淡蓝色  148草绿色  208橙色 235深灰色
"202浅灰色  241灰色  231灰色  88深红  59灰色 95红灰 102浅灰色
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
hi Directory       term=bold ctermfg=186 guifg=Blue "地址
hi SyntasticWarningSign cterm=bold ctermbg=NONE ctermfg=15
hi Error           term=reverse cterm=bold ctermfg=22 ctermbg=148 guifg=White guibg=Red"错误标记
hi SignColumn      term=standout ctermfg=15 ctermbg=NONE guifg=DarkBlue guibg=Grey"标记列
hi SpellBad        term=reverse cterm=bold ctermfg=22 ctermbg=148 gui=undercurl guisp=Red
hi VertSplit	   ctermfg=237 ctermbg=237 "垂直分割线
hi Split	   	ctermfg=237 ctermbg=237 "水平分割线
hi SpecialKey      term=bold ctermfg=9 guifg=Blue
hi NonText         term=bold cterm=bold ctermfg=242 gui=bold guifg=Blue          "行号下面的 ~ 符号
hi ErrorMsg        term=standout cterm=bold ctermfg=15 ctermbg=12 guifg=White guibg=Red
hi IncSearch       term=reverse cterm=reverse gui=reverse
hi Search          term=reverse ctermfg=NONE ctermbg=NONE guibg=Yellow    "搜索被高亮的字
hi MoreMsg         term=bold ctermfg=2 gui=bold guifg=SeaGreen
hi ModeMsg         term=bold cterm=bold gui=bold
hi LineNr          term=underline ctermfg=102 guifg=Brown           "行号
hi cursorLineNr     term=underline ctermfg=102 ctermbg=237 guifg=Brown           "当前行号
hi Question        term=standout ctermfg=3 gui=bold guifg=SeaGreen
hi StatusLine      term=bold,reverse cterm=bold,reverse gui=bold,reverse   "下边状态颜色
hi StatusLineNC    term=reverse cterm=reverse gui=reverse
hi VertSplit       term=reverse cterm=reverse gui=reverse
hi Title           term=bold ctermfg=5 gui=bold guifg=Magenta
hi Visual          term=reverse cterm=reverse ctermbg=15 guibg=LightGrey
hi VisualNOS       term=bold cterm=bold gui=bold
hi WarningMsg      term=standout ctermfg=Red guifg=Red
hi WildMenu        term=standout ctermfg=0 ctermbg=14 guifg=Black guibg=Yellow
hi Folded          term=standout ctermfg=3 ctermbg=7 guifg=DarkBlue
hi FoldColumn      term=standout ctermfg=3 ctermbg=7 guifg=DarkBlue guibg=Grey
hi DiffAdd         term=bold ctermbg=3 guibg=LightBlue
hi DiffChange      term=bold ctermbg=208 guibg=LightMagenta   "选中时候的颜色
hi DiffDelete      term=bold cterm=bold ctermfg=3 ctermbg=7 gui=bold guifg=Blue guibg=LightCyan
hi DiffText        term=reverse cterm=bold ctermbg=12 gui=bold guibg=Red
hi Conceal         ctermfg=7 ctermbg=0 guifg=LightGrey guibg=DarkGrey
hi SpellCap        term=reverse ctermbg=3 gui=undercurl guisp=Blue
hi SpellRare       term=reverse ctermbg=5 gui=undercurl guisp=Magenta
hi SpellLocal      term=underline ctermbg=3 gui=undercurl guisp=DarkCyan
"hi Pmenu           ctermfg=231 ctermbg=98 guibg=LightMagenta  "下拉框颜色
"hi PmenuSel        cterm=bold ctermfg=55 ctermbg=231 guibg=Grey      "下拉框内容被选中时的颜色
"hi Pmenu           ctermfg=251 ctermbg=240 guibg=LightMagenta  "下拉框颜色
"hi PmenuSel        cterm=bold ctermfg=254 ctermbg=238 guibg=Grey      "下拉框内容被选中时的颜色
hi PmenuSbar       ctermfg=197 ctermbg=7 guibg=Grey   "下拉边框的滚动栏颜色
hi PmenuThumb      cterm=reverse gui=reverse  "下拉框滚动按钮颜色
hi TabLine         term=underline cterm=underline ctermfg=0 ctermbg=7 gui=underline guibg=LightGrey
hi TabLineSel      term=bold cterm=bold gui=bold
hi TabLineFill     term=reverse cterm=reverse gui=reverse
hi CursorColumn    term=reverse ctermbg=7 guibg=Grey90
hi CursorLine      term=underline cterm=underline guibg=Grey90
hi ColorColumn     term=reverse ctermbg=12 guibg=LightRed
hi MatchParen      term=reverse ctermbg=208 guibg=Cyan               "() {} 光标位于此处时的颜色
hi Comment         term=bold ctermfg=242 guifg=Blue             "注释
hi Constant        term=underline ctermfg=186 guifg=Magenta  "字符串常量
hi Special         term=bold ctermfg=141 guifg=SlateBlue          "%d 
hi Identifier      term=underline ctermfg=81 guifg=DarkCyan 
hi Statement       term=bold ctermfg=197 gui=bold guifg=Brown           "for if     
hi PreProc         term=underline ctermfg=197 guifg=Purple              "#include
hi Type            term=underline ctermfg=81 cterm=NONE gui=bold guifg=SeaGreen             "int const    
hi Underlined      term=underline cterm=underline ctermfg=5 gui=underline guifg=SlateBlue
hi Ignore          cterm=bold ctermfg=15 guifg=bg
hi Number          ctermfg=141 ctermbg=NONE cterm=NONE guifg=#ae81ff guibg=NONE gui=NONE
hi Boolean         ctermfg=141 ctermbg=NONE cterm=NONE
"hi Function        ctermfg=141 ctermbg=NONE cterm=NONE
"hi Cursor          ctermfg=235 ctermbg=208 cterm=NONE guifg=#272822 guibg=#f8f8f0 gui=NONE
hi StorageClass     ctermfg=197 ctermbg=NONE cterm=NONE
"hi SpecialChar ctermfg=148 ctermbg=NONE cterm=NONE
hi Todo            term=standout ctermfg=0 ctermbg=208 guifg=Blue guibg=Yellow "光标颜色
hi Pmenu           ctermfg=251 ctermbg=237 guibg=LightMagenta  "下拉框颜色
hi PmenuSel        cterm=bold ctermfg=NONE ctermbg=240 guibg=Grey      "下拉框内容被选中时的颜色
